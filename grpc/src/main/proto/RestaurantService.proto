syntax = "proto3";

option java_package = "edu.cooper.ece366.restaurantReservation.grpc";
option java_multiple_files = true;

service AuthService {
	rpc createUser (CreateUserRequest) returns (User);
	rpc authenticate(AuthRequest) returns (AuthResponse);
	rpc refreshToken(RefreshRequest) returns (AuthResponse);
}

service RestaurantService {
	rpc createRestaurant (Restaurant) returns (Restaurant); // Will accept a restaurant either with
	// A) no id, address w/ no id, contact w/ no id, category and returns restaurant w/ id, address w/ just id, contact w/ just id
	// B) no id, address w/ id, contact w/ no id, category and returns restaurant w/ id, contact w/ just id
	// C) no id, address w/ no id, contact w/ id, category and returns restaurant w/ id, address w/ just id
	// D) no id, address w/ id, contact w/ id, category and returns restaurant w/ id
	rpc getRestaurant (Restaurant) returns (Restaurant); // send id, get whole thing
	rpc setRestaurant (Restaurant) returns (Restaurant); // send info desired to change, returns result
	rpc deleteRestaurant (Restaurant) returns (DeleteRestaurantResponse);
	rpc searchByCategory (Category) returns (stream Restaurant);

	rpc createTable (CreateTableRequest) returns (Table); // returns just id
	rpc getTablesByRestaurant (Restaurant) returns (stream Table);
	rpc getTableById (Table) returns (Table);
	rpc setTable (Table) returns (Table);
	rpc deleteTable (Table) returns (DeleteTableResponse);

	rpc getRestaurantsByUser (User) returns (stream Relationship);
	rpc getUsersByRestaurant (Restaurant) returns (stream Relationship);
	rpc setRelationship (Relationship) returns (RelationshipResponse);
}

service UserService {
	rpc getUser (User) returns (User);
	rpc setUser (User) returns (User); // for name and contact; A and B depending on if contact had ID or info
}

service ReservationService {
	rpc createReservation (Reservation) returns (Reservation);
	rpc inviteReservation (stream InviteMessage) returns (InviteResponse);
	rpc listReservationUsers (Reservation) returns (stream User);
	rpc getReservation (Reservation) returns (Reservation);
	rpc setReservation (Reservation) returns (Reservation); // status or num people or points
	rpc getReservationsByUser (User) returns (stream Reservation);
	rpc getReservationsByRestaurant (Restaurant) returns (stream Reservation);
	rpc getReservationTables (Reservation) returns (stream Table);
	rpc getReservationUsers (Reservation) returns (stream User); // first one passed is the primary user
}

message Restaurant {
	uint32 id = 1;
	Address address = 2;
	Contact contact = 3;
	Category category = 4;
	string name = 5;
	uint32 capacity = 6;
	uint32 rtime = 7;
}

message Category {
	uint32 category = 1;
	string name = 2;
}

message Address {
	uint32 id = 1;
	string name = 2;
	float latitude = 3;
	float longitude = 4;
	string line1 = 5;
	string line2 = 6;
	string city = 7;
	string state = 8;
	string zip = 9;
}

message Contact {
	uint32 id = 1;
	string phone = 2;
	string email = 3;
}

message Table {
	uint32 id = 1;
	uint32 capacity = 2;
	string label = 3;
}

message User {
	uint32 id = 1;
	string username = 2;
	string fname = 4;
	string lname = 5;
	Contact contact = 6;
	int32 points = 7;
	enum UserRole {
		CUSTOMER = 0;
		MANAGER = 1;
		ADMIN = 2;
	}
	UserRole role = 8;
}

message CreateUserRequest {
	string password = 1;
	User user = 2;
}

message AuthRequest {
	string username = 1;
	string password = 2;
	string userAgent = 3;
}

message RefreshRequest {
	string refreshToken = 1;
	string userAgent = 2;
}

message AuthResponse {
	string authToken = 1;
	string refreshToken = 2;
}

message Reservation {
	uint32 id = 1;
	uint64 startTime = 2;
	Restaurant restaurant = 3; // just ID
	uint32 numPeople = 4;
	uint32 points = 5;
	enum ReservationStatus {
		DEFAULT = 0;
		CANCELLED = 1;
		// will the restaurant mark as completed?
	}
	ReservationStatus status = 6;
}

message CreateTableRequest {
	Restaurant target = 1; // just ID
	Table table = 2; // no ID
}

message Relationship {
	Restaurant restaurant = 1;
	enum UserRole {
		CUSTOMER = 0;
		MANAGER = 1;
		ADMIN = 2;
	}
	UserRole role = 2;
	User user = 3; // for setting
}

message RelationshipResponse {
}

message InviteMessage {
	Reservation reservation = 1;
	User user = 2;
}

message InviteResponse {
}

message DeleteRestaurantResponse {
}

message DeleteTableResponse {
}
