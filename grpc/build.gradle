// To build it:
// $ ../gradlew clean build installDist

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

repositories {
	maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
	}
}

def grpcVersion = '1.27.0'
def protobufVersion = '3.11.0'
def protocVersion = protobufVersion

dependencies {
	compile "org.slf4j:slf4j-nop:1.7.25"
	compile "com.google.protobuf:protobuf-java:${protobufVersion}"
	compile "io.grpc:grpc-stub:${grpcVersion}"
	compile "io.grpc:grpc-protobuf:${grpcVersion}"
	compile "io.grpc:grpc-services:${grpcVersion}"
	if (JavaVersion.current().isJava9Compatible()) {
		// Workaround for @javax.annotation.Generated
		// see: https://github.com/grpc/grpc-java/issues/3633
		compile 'javax.annotation:javax.annotation-api:1.3.1'
	}
	// Extra proto source files besides the ones residing under
	// "src/main".
	/*
	protobuf files("lib/protos.tar.gz")
	protobuf files("ext/")
	*/
	//JDBI Plugin
	compile "org.jdbi:jdbi3-core:3.2.0"
	compile "org.jdbi:jdbi3-sqlobject:3.2.0"

	//MySQL Plugin
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
	runtime "mysql:mysql-connector-java:8.0.15"

	//Argon2
	compile 'de.mkammerer:argon2-jvm:2.6'

	//JWT Plugin
	compile 'io.jsonwebtoken:jjwt-api:0.11.0';
	runtime 'io.jsonwebtoken:jjwt-impl:0.11.0',
	// Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
	//'org.bouncycastle:bcprov-jdk15on:1.60',
	'io.jsonwebtoken:jjwt-jackson:0.11.0' // or 'io.jsonwebtoken:jjwt-gson:0.11.0' for gson

	runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

	testCompile 'junit:junit:4.12'
	// Extra proto source files for test besides the ones residing under
	// "src/test".
	/*
	testProtobuf files("lib/protos-test.tar.gz")
	*/
}

protobuf {
	protoc {
		// The artifact spec for the Protobuf Compiler
		artifact = "com.google.protobuf:protoc:${protocVersion}"
	}
	plugins {
		// Optional: an artifact spec for a protoc plugin, with "grpc" as
		// the identifier, which can be referred to in the "plugins"
		// container of the "generateProtoTasks" closure.
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		ofSourceSet('main')*.plugins {
			// Apply the "grpc" plugin whose spec is defined above, without
			// options.  Note the braces cannot be omitted, otherwise the
			// plugin will not be added. This is because of the implicit way
			// NamedDomainObjectContainer binds the methods.
			grpc { }
		}
	}
}

startScripts.enabled = false

task applicationServer(type: CreateStartScripts) {
    mainClassName = 'edu.cooper.ece366.restaurantReservation.grpc.ApplicationServer'
    applicationName = 'application-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task argonParams(type: CreateStartScripts) {
	mainClassName = 'edu.cooper.ece366.restaurantReservation.grpc.ComputeArgonParams'
	applicationName = 'argon-params'
	outputDir = new File(project.buildDir, 'tmp')
	classpath = startScripts.classpath
}

application {
  mainClassName = 'edu.cooper.ece366.restaurantReservation.grpc.ApplicationServer'
}
applicationDistribution.into('bin') {
    from(applicationServer)
    from(argonParams)
    fileMode = 0755
}

compileJava {
	options.compilerArgs << '-parameters'
}