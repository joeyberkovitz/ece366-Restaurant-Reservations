// To build it:
// $ ../gradlew clean build installDist

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

repositories {
  maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
  }
}

def grpcVersion = '1.27.0'
def protobufVersion = '3.11.0'
def protocVersion = protobufVersion

dependencies {
  compile "com.google.protobuf:protobuf-java:${protobufVersion}"
  compile "io.grpc:grpc-stub:${grpcVersion}"
  compile "io.grpc:grpc-protobuf:${grpcVersion}"
  compile "io.grpc:grpc-services:${grpcVersion}"
  if (JavaVersion.current().isJava9Compatible()) {
    // Workaround for @javax.annotation.Generated
    // see: https://github.com/grpc/grpc-java/issues/3633
    compile 'javax.annotation:javax.annotation-api:1.3.1'
  }
  // Extra proto source files besides the ones residing under
  // "src/main".
  /*
  protobuf files("lib/protos.tar.gz")
  protobuf files("ext/")
  */
  //JDBI Plugin
  compile "org.jdbi:jdbi3-core:3.2.0"
  compile "org.jdbi:jdbi3-sqlobject:3.2.0"

  compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
  runtime "mysql:mysql-connector-java:8.0.15"

  runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

  testCompile 'junit:junit:4.12'
  // Extra proto source files for test besides the ones residing under
  // "src/test".
  /*
  testProtobuf files("lib/protos-test.tar.gz")
  */
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
  }
}

startScripts.enabled = false

task restaurantServer(type: CreateStartScripts) {
    mainClassName = 'edu.cooper.ece366.restaurantReservation.grpc.RestaurantServer'
    applicationName = 'restaurant-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(restaurantServer)
    fileMode = 0755
}

compileJava {
  options.compilerArgs << '-parameters'
}